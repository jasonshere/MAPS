Client Module
---------------------------------

.. code::

    This part is to support services on Advisor PI, 
    the services contain send command to Reception PI by gRPC and google assistant voice recognition service.

**The working flow between Reception PI and Advisor PI:**

- 1. When the doctor says "Okay google, **next patient**", the Advisor PI will get next patient
- 2. Then notify the Reception PI by gRPC
- 3. When Reception PI get the notification, it will wake the facial recognition up to detect patient
- 4. If the patient's face is detected, it will show the doctor's office number on Reception PI
- 5. Otherwise it will tell the doctor the patient has not arrived yet 

**The service on Advisor PI:**

- Receive and recognise doctor's voice command by google assistant and gRPC
- Get next patient's information and send to gRPC's server which is Reception PI
- Get the information that is if the patient has arrived
- Make notes by voice command during appointment

**Files(Please put maps_assis on Advisor PI)**

.. csv-table:: 
   :header: "File Name", "Functionality"
   :widths: 40, 60

   "maps_assis/assistant.py", "The assistant file that can start up google assistant and gRPC client"
   "maps_assis/assistant_conf.py", "Set up the gRPC server address and port, set up doctor's email and office number"
   "maps_assis/google_env", "The virtual environment for assistant"
   "maps_assis/grpc", "The folder storing gRPC servicer files, do not edit it"

**Usage**

- Enable virtual environment:

.. code::
  
  # pi @ raspberrypi : source google_env/bin/activate

- Start up connection to gRPC server and google assistant:

.. code::

  # pi @ raspberrypi(env) : python3 assistant.py // Next you can give commands by google assistant

**Actions**

- Define the voice command on Advisor PI:

.. code::

    elif event.type == EventType.ON_RECOGNIZING_SPEECH_FINISHED and event.args:
        print('You said:', event.args['text'])
        text = event.args['text'].lower()
        if text == 'next patient':
            assistant.stop_conversation()
            get_next_patient()
        if text.find('make a note') != -1:
            assistant.stop_conversation()
            edit_notes(text[19:])

    // Right here you can add your actions

- get_next_patient() Method can get next patient information
- edit_notes() Method can edit notes gfor current patient
- grpc_run() Method can send message to gRPC server



