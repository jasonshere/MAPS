Server Module
---------------------------------

.. code::

    This part is to support services on Reception PI, 
    the services contain gRPC service and facial recognition service.

**The working flow between Reception PI and Advisor PI:**

- 1. When the doctor says "Okay google, **next patient**", the Advisor PI will get next patient
- 2. Then notify the Reception PI by gRPC
- 3. When Reception PI get the notification, it will wake the facial recognition up to detect patient
- 4. If the patient's face is detected, it will show the doctor's office number on Reception PI
- 5. Otherwise it will tell the doctor the patient has not arrived yet 

**The service on Reception PI:**

- Receive the patient information from Advisor PI by gRPC
- Detect patient's face to identify if the patient has arrived
- Notify the Advisor PI whether the patient has arrived
- Show the doctor's office number on Reception PI
- Record and encode the patient's face picture in advance

**Files(Please put maps_assis/grpc_server on Reception PI)**

.. csv-table:: 
   :header: "File Name", "Functionality"
   :widths: 40, 60

   "maps_assis/grpc_server/record.py", "The file can record the patient face to pictures into the Reception PI"
   "maps_assis/grpc_server/encode.py", "Before detecting the patient's face, please run this file to encode the pictures"
   "maps_assis/grpc_server/detect.py", "The file has the functionality to detect the patient's face"
   "maps_assis/grpc_server/maps_server.py", "The file if for starting up gRPC servicer to listening and receive the message from Advisor PI and call the detection of patient's face"
   "maps_assis/grpc_server/maps.proto", "The file is for generation gRPC server compile file"
   "maps_assis/grpc_server/dataset", "The folder saving record face picture"
   "maps_assis/grpc_server/cv2.so", "The OpenCV library"
   "maps_assis/grpc_server/maps_pb2.py", "The gRPC compile file"
   "maos_assis/grpc_server/maps_pb2_grpc.py", "The gRPC compile file"

**Usage**

- Record patient's face into system:

.. code::
  
  # pi @ raspberrypi : workon cv
  # pi @ raspberrypi(cv) : python3 record.py // It will record 10 pictures
  # pi @ raspberrypi(cv) : python3 encode.py // before detection we need to encode pictures first

- Detect patient's face:

.. code::

  # pi @ raspberrypi(cv) : python3 detect.py // It will detect the patient's name

- Start up gRPC server:

.. code::

  # pi @ raspberrypi(cv) : X // start up X server first
  # pi @ raspberrypi(cv) : python3 maps_server.py // start up gRPC server

  // Next, wait for Advisor's command


